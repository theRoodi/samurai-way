{"version":3,"file":"static/js/3.711c75ee.chunk.js","mappings":"wKACA,G,QAA0B,0BAA1B,EAAiE,6BAAjE,EAAuG,wBAAvG,EAA2K,0BAA3K,EAA+M,yB,6BCMlMA,EAAa,SAACC,GACvB,OACI,iBAAKC,UAAWC,EAAhB,WACI,gBAAKC,IAAKC,EAAeC,IAAI,YAC7B,SAAC,KAAD,CAASC,GAAI,YAAcN,EAAMO,GAAjC,SAAsCP,EAAMQ,WCL3CC,EAAU,SAACT,GACpB,OACI,gBAAKC,UAAWC,EAAhB,SACKF,EAAMU,W,uCCuCbC,GAAYC,EAAAA,EAAAA,GAAiB,IAqB7BC,GAAkBC,EAAAA,EAAAA,GAAU,CAACC,KAAM,cAAjBD,EAnBE,SAACd,GACvB,OACI,0BACI,kBAAMgB,SAAUhB,EAAMiB,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,GACXC,MAAM,WACNb,KAAK,iBACLc,YAAY,gBACZC,SAAU,CAACC,EAAAA,EAAeb,QAErC,0BACI,+C,mBC9CpB,GAAec,E,QAAAA,KACXC,EAAAA,EAAAA,KARoB,SAACC,GACrB,MAAO,CACHC,QAASD,EAAME,YAAYD,QAC3BE,SAAUH,EAAME,YAAYC,YAKP,CAACC,WAAAA,EAAAA,IAC1BC,EAAAA,EAFJ,EDauB,SAAChC,GACpB,IAAMiC,EAAkBjC,EAAM4B,QAAQM,KAAI,SAAAC,GAAC,OAAI,SAACpC,EAAD,CAAuBQ,GAAI4B,EAAE5B,GAAIC,KAAM2B,EAAE3B,MAAxB2B,EAAE5B,OAE5D6B,EAAkBpC,EAAM8B,SAASI,KAAI,SAAAG,GAAC,OAAI,SAAC5B,EAAD,CAAoBC,QAAS2B,EAAE3B,SAAjB2B,EAAE9B,OAIhE,OACI,iBAAKN,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACK+B,KAEL,gBAAKhC,UAAWC,EAAhB,SACKkC,KAEL,SAACvB,EAAD,CAAiBG,SAXN,SAACsB,GAChBtC,EAAM+B,WAAWO,EAAMC,0B,8HExBzBC,EAAkB,SAACb,GACrB,MAAO,CACHc,KAAMd,EAAMc,OAGb,SAAST,EAAiBU,GAW7B,OAFgBhB,EAAAA,EAAAA,IAAQc,EAARd,EARhB,SAA2B1B,GACvB,IAAKyC,EAAsBzC,EAAtByC,KAASE,GAAd,OAA2B3C,EAA3B,GACA,OAAKyC,EAAKG,QAGH,SAACF,GAAD,UAAeC,KAFX,SAAC,KAAD,CAAUrC,GAAG,gB","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/AuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__SN6fo\",\"dialogItems\":\"Dialogs_dialogItems__MPIvD\",\"dialog\":\"Dialogs_dialog__DoMD6\",\"active\":\"Dialogs_active__cMLCY\",\"messages\":\"Dialogs_messages__GbdUc\",\"message\":\"Dialogs_message__4oMGc\"};","import style from '../Dialogs.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\nimport React from 'react';\r\nimport {DialogsType} from '../../../state/dialogReducer';\r\nimport defaultAvatar from '../../../assets/images/defaultAvatar.png'\r\n\r\n\r\nexport const DialogItem = (props: DialogsType) => {\r\n    return (\r\n        <div className={style.dialog}>\r\n            <img src={defaultAvatar} alt=\"avatar\"/>\r\n            <NavLink to={'/dialogs/' + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}","import style from '../Dialogs.module.css';\r\nimport React from 'react';\r\n\r\ntype PropsMessageType = {\r\n    message: string\r\n}\r\nexport const Message = (props: PropsMessageType) => {\r\n    return (\r\n        <div className={style.message}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nimport style from './Dialogs.module.css'\r\nimport {DialogItem} from './DialogItem/DialogItem';\r\nimport {Message} from './Message/Message';\r\nimport {DialogsType, MessagesType} from '../../state/dialogReducer';\r\nimport {Field, reduxForm} from 'redux-form';\r\nimport {FormControl} from '../common/FormsControl/FormsControl';\r\nimport {maxLengthCreator, requiredFiled} from '../../utils/validator';\r\n\r\nexport type AuthPropsType = {\r\n    userId: number,\r\n    email: string,\r\n    login: string,\r\n    isAuth: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    addMessage: (newMessageText: string) => void\r\n    updateNewMessageText: (newText: string) => void\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessagesType>\r\n    newMessageText: string\r\n    auth: AuthPropsType\r\n}\r\n\r\ntype FromDataType = {\r\n    newMessageText: string\r\n}\r\nexport const Dialogs = (props: PropsType) => {\r\n    const dialogsElements = props.dialogs.map(d => <DialogItem key={d.id} id={d.id} name={d.name}/>)\r\n\r\n    const messageElements = props.messages.map(m => <Message key={m.id} message={m.message}/>)\r\n    const addMessage = (value: any) => {\r\n        props.addMessage(value.newMessageText)\r\n    }\r\n    return (\r\n        <div className={style.dialogs}>\r\n            <div className={style.dialogItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={style.messages}>\r\n                {messageElements}\r\n            </div>\r\n            <DialogFormRedux onSubmit={addMessage}/>\r\n        </div>\r\n    )\r\n}\r\nconst maxLength = maxLengthCreator(50)\r\n// export const DialogForm: React.FC<InjectedFormProps<FromDataType>> =\r\nexport const DialogForm = (props: any) => {\r\n    return (\r\n        <div>\r\n            <form onSubmit={props.handleSubmit}>\r\n                <div>\r\n                    <Field component={FormControl}\r\n                           child=\"textarea\"\r\n                           name=\"newMessageText\"\r\n                           placeholder=\"Enter message\"\r\n                           validate={[requiredFiled, maxLength]}/>\r\n                </div>\r\n                <div>\r\n                    <button>Send</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst DialogFormRedux = reduxForm({form: 'dialogForm'})(DialogForm)","import React from 'react';\r\nimport {addMessage } from '../../state/dialogReducer';\r\nimport {Dialogs} from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {authRedirect} from '../../hoc/AuthRedirect';\r\nimport {compose} from 'redux';\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogs: state.messagePage.dialogs,\r\n        messages: state.messagePage.messages\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {addMessage}),\r\n    authRedirect)\r\n(Dialogs)\r\n","import React, {ComponentType} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../redux/redux-store';\r\nimport {AuthPropsType} from '../components/Dialogs/Dialogs';\r\n\r\ntype MapStatePropsType = {\r\n    auth : AuthPropsType\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType):MapStatePropsType => {\r\n    return {\r\n        auth: state.auth\r\n    }\r\n}\r\nexport function authRedirect <T>(Component: ComponentType<T>) {\r\n    function RedirectComponent(props: MapStatePropsType) {\r\n        let {auth, ...restProps} = props\r\n        if (!auth.isAuth) {\r\n            return <Redirect to=\"/login\"/>\r\n        }\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n    let Connected = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return Connected\r\n}"],"names":["DialogItem","props","className","style","src","defaultAvatar","alt","to","id","name","Message","message","maxLength","maxLengthCreator","DialogFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","FormControl","child","placeholder","validate","requiredFiled","compose","connect","state","dialogs","messagePage","messages","addMessage","authRedirect","dialogsElements","map","d","messageElements","m","value","newMessageText","mapStateToProps","auth","Component","restProps","isAuth"],"sourceRoot":""}